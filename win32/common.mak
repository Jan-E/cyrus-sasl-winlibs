#Can this be autogenerated?
#Keep in sync with include/sasl.h and win32/include/config.h
SASL_VERSION_MAJOR=2
SASL_VERSION_MINOR=1
SASL_VERSION_STEP=27

!IF "$(STATIC)" == ""
STATIC=no
!ENDIF

!IF "$(STATIC_PLUGIN)" == ""
STATIC_PLUGIN=no
!ENDIF

# Detect Visual Studio Version
# Reference: http://mateusz.loskot.net/2009/03/29/detecting-visual-c-version-in-nmake-makefile/
!IF "$(_NMAKE_VER)" == ""
MSVC_VER = 4.0
VCVER = 4
!ERROR *** Prehistoric version of Visual C++
!ELSEIF "$(_NMAKE_VER)" == "162"
MSVC_VER = 5.0
VCVER = 5
!ERROR *** Prehistoric version of Visual C++
!ELSEIF "$(_NMAKE_VER)" == "6.00.8168.0"
MSVC_VER = 6.0
VCVER = 6
MSC_VER = 1200
!ERROR *** Prehistoric version of Visual C++
!ELSEIF "$(_NMAKE_VER)" == "7.00.9466"
MSVC_VER = 7.0
VCVER = 7
MSC_VER = 1300
!ELSEIF "$(_NMAKE_VER)" == "7.10.3077"
MSVC_VER = 7.1
VCVER = 7
MSC_VER = 1310
!ELSEIF "$(_NMAKE_VER)" == "8.00.50727.42"
MSVC_VER = 8.0
VCVER = 8
MSC_VER = 1400
!ELSEIF "$(_NMAKE_VER)" == "8.00.50727.762"
MSVC_VER = 8.0
VCVER = 8
MSC_VER = 1400
!ELSEIF "$(_NMAKE_VER)" == "9.00.21022.08"
MSVC_VER = 9.0
VCVER = 9
MSC_VER = 1500
!ELSEIF "$(_NMAKE_VER)" == "9.00.30729.01"
MSVC_VER = 9.0
VCVER = 9
MSC_VER = 1500
!ELSEIF "$(_NMAKE_VER)" == "11.00.61030.0"
MSVC_VER = 11.0
VCVER = 11
MSC_VER = 1700
!ELSEIF "$(_NMAKE_VER)" == "14.00.24210.0"
MSVC_VER = 14.0
VCVER = 14
MSC_VER = 1900
!ELSE
MSVC_VER = 0.0
VCVER = 0
MSC_VER = 0
!ENDIF
!MESSAGE *** Using Microsoft NMAKE version $(_NMAKE_VER)
!MESSAGE *** Using Microsoft Visual C++ version $(MSVC_VER)


!IF "$(VCVER)" == "6" || "$(VCVER)" == "7"
# Use in Visual Studio 6 & 7:
EXCEPTHANDLING=/GX
RUNTIMEERRORCHECK=/GZ
!ELSE
# Use in Visual Studio 8 & 9:
EXCEPTHANDLING=/EHsc
RUNTIMEERRORCHECK=/RTC1
!ENDIF

# Define compiler/linker/etc.

CPP=cl.exe /nologo
LINK32=link.exe /nologo
LINK32DLL=$(LINK32) /dll
LINK32EXE=$(LINK32)
# It seems that -lib must be the first parameter
LINK32LIB=link.exe /lib /nologo

SYS_LIBS=ws2_32.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib ntdll.lib

!IF "$(BITS)" == "64"
SYS_LIBS=$(SYS_LIBS) bufferoverflowU.lib
!ENDIF

# Define the minimal Windows OS you want to run on:40 (NT), 50 (W2K), 51 (XP)
# Default is no restrictions. Currently we only check for 51 or later.
#TARGET_WIN_SYSTEM=51

!IF "$(TARGET_WIN_SYSTEM)" == ""
!IF "$(VERBOSE)" != "0"
!MESSAGE Applications and libraries should run on any Win32 system.
!ENDIF
TARGET_WIN_SYSTEM=0
!ENDIF

# prefix variable is currently only being used by install target
!IF "$(prefix)" == ""
prefix=C:\CMU
!IF "$(VERBOSE)" != "0"
!MESSAGE Default installation directory is $(prefix).
!ENDIF 
!ENDIF

!IF "$(CFG)" == ""
CFG=Release
!IF "$(VERBOSE)" != "0"
!MESSAGE No configuration specified. Defaulting to $(CFG).
!ENDIF
!ENDIF 

!IF "$(DB_LIB)" == ""
DB_LIB=libdb41s.lib
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting BerkeleyDB to $(DB_LIB).
!ENDIF
!ENDIF

!IF "$(DB_INCLUDE)" == ""
DB_INCLUDE=c:\work\isode\db\build_win32
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting BerkeleyDB include path to $(DB_INCLUDE).
!ENDIF
!ENDIF

!IF "$(DB_LIBPATH)" == ""
DB_LIBPATH=c:\work\isode\db\build_win32\Release_static
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting BerkeleyDB library path to $(DB_LIBPATH).
!ENDIF
!ENDIF

!IF "$(LMDB_INCLUDE)" == ""
LMDB_INCLUDE=c:\work\isode\lmdb\libraries\liblmdb
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting LMDB include path to $(LMDB_INCLUDE).
!ENDIF
!ENDIF

!IF "$(LMDB_LIBPATH)" == ""
LMDB_LIBPATH=c:\work\isode\lmdb\libraries\liblmdb\Release
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting LMDB library path to $(LMDB_LIBPATH).
!ENDIF
!ENDIF

!IF "$(OPENSSL_INCLUDE)" == ""
OPENSSL_INCLUDE="D:\openssl\engine-0.9.6g-md3\include"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting OpenSSL Include path to $(OPENSSL_INCLUDE).
!ENDIF
!ENDIF

!IF "$(OPENSSL_LIBPATH)" == ""
OPENSSL_LIBPATH="D:\openssl\engine-0.9.6g-md3\lib"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting OpenSSL library path to $(OPENSSL_LIBPATH).
!ENDIF
!ENDIF

!IF "$(GSSAPI_INCLUDE)" == ""
GSSAPI_INCLUDE="C:\Program Files\CyberSafe\Developer Pack\ApplicationSecuritySDK\include"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting GSSAPI Include path to $(GSSAPI_INCLUDE).
!ENDIF
!ENDIF

!IF "$(GSSAPI_LIBPATH)" == ""
GSSAPI_LIBPATH="C:\Program Files\CyberSafe\Developer Pack\ApplicationSecuritySDK\lib"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting GSSAPI library path to $(GSSAPI_LIBPATH).
!ENDIF
!ENDIF

!IF "$(SQLITE_INCLUDES)" == ""
SQLITE_INCLUDES=/I"C:\work\open_source\sqllite\sqlite\src" /I"C:\work\open_source\sqllite\sqlite\win32"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting SQLITE_INCLUDES includes to $(SQLITE_INCLUDES).
!ENDIF
!ENDIF

!IF "$(SQLITE_LIBPATH)" == ""
SQLITE_LIBPATH="C:\work\open_source\sqllite\sqlite\objs"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting SQLITE library path to $(SQLITE_LIBPATH).
!ENDIF
!ENDIF

!IF "$(SQLITE_INCLUDES3)" == ""
SQLITE_INCLUDES3=/I"c:\work\sqlite\generated"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting SQLITE_INCLUDES3 includes to $(SQLITE_INCLUDES3).
!ENDIF
!ENDIF

!IF "$(SQLITE_LIBPATH3)" == ""
SQLITE_LIBPATH3="c:\work\sqlite\objs.NT"
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting SQLITE library path to $(SQLITE_LIBPATH3).
!ENDIF
!ENDIF

!IF "$(LDAP_LIB_BASE)" == ""
LDAP_LIB_BASE = c:\work\open_source\openldap\openldap-head\ldap\Debug
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting LDAP library path to $(LDAP_LIB_BASE).
!ENDIF
!ENDIF

!IF "$(LDAP_INCLUDE)" == ""
LDAP_INCLUDE = c:\work\open_source\openldap\openldap-head\ldap\include
!IF "$(VERBOSE)" != "0"
!MESSAGE Defaulting LDAP include path to $(LDAP_INCLUDE).
!ENDIF
!ENDIF

!IF "$(SASL_DB_PATH)" == ""
SASL_DB_PATH="sasldb2"
!ENDIF

!IF "$(OS)" == "Windows_NT"
NULL=
!ELSE 
NULL=nul
!ENDIF


!IF  "$(CFG)" == "Release"

!IF "$(CODEGEN)" == ""
!IF "$(STATIC)" == "yes"
CODEGEN=/MT
!ELSE
CODEGEN=/MD
!ENDIF 
!IF "$(VERBOSE)" != "0"
!MESSAGE Codegeneration defaulting to $(CODEGEN).
!ENDIF 
!ENDIF 

!IF "$(VCVER)" != "6"
ENABLE_WIN64_WARNINGS=
!ENDIF

!IF "$(VCVER)" == "9" || "$(VCVER)" == "11"
# Use in Visual Studio 9 & 11:
CPP_PROJ= $(CODEGEN) /W3 $(EXCEPTHANDLING) /O2 $(ENABLE_WIN64_WARNINGS) /Zi /D "NDEBUG" $(CPPFLAGS) /c
!ELSE
CPP_PROJ= /guard:cf /Zc:inline /GF /GL /Gw $(CODEGEN) /W3 $(EXCEPTHANDLING) /Ox $(ENABLE_WIN64_WARNINGS) /Zi /D "NDEBUG" /D _CRT_SECURE_NO_DEPRECATE=1 $(CPPFLAGS) /FD /c
!ENDIF

incremental=no

# This use to contain /machine:I386. This breaks cross compiling to Windows 64.
# It doesn't seem that the /machine option is needed anyway.
!IF "$(VCVER)" == "9" || "$(VCVER)" == "11"
# Use in Visual Studio 9 & 11:
LINK32_FLAGS=/debug
!ELSE
LINK32_FLAGS=/debug /GUARD:CF /opt:ref,icf /NXCOMPAT /DYNAMICBASE
!ENDIF

!ELSEIF  "$(CFG)" == "Debug"

!IF "$(CODEGEN)" == ""
!IF "$(STATIC)" == "yes"
CODEGEN=/MTd
!ELSE
CODEGEN=/MDd
!ENDIF 
!IF "$(VERBOSE)" != "0"
!MESSAGE Codegeneration defaulting to $(CODEGEN).
!ENDIF 
!ENDIF 

CPP_PROJ=$(CODEGEN) /W3 /Gm $(EXCEPTHANDLING) /ZI /Od /D "_DEBUG" /D _CRT_SECURE_NO_DEPRECATE=1 $(CPPFLAGS) /FD /RTC1 /c

incremental=yes

# This use to contain /machine:I386. This breaks cross compiling to Windows 64.
# It doesn't seem that the /machine option is needed anyway.
LINK32_FLAGS=/debug /pdbtype:sept

!ENDIF

LINK32DLL_FLAGS=/incremental:$(incremental) $(LINK32_FLAGS) $(SYS_LIBS) $(EXTRA_LIBS)

# Assume we are only building console applications
LINK32EXE_FLAGS=/subsystem:console /incremental:$(incremental) $(LINK32_FLAGS) $(SYS_LIBS) $(EXTRA_LIBS)

# Assume we are only building console applications
LINK32EXE_FLAGS=/subsystem:console /incremental:$(incremental) $(LINK32_FLAGS) $(SYS_LIBS) $(EXTRA_LIBS)

LINK32LIB_FLAGS=$(LINK32_FLAGS)
